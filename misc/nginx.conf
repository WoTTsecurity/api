upstream django {
    server localhost:8000;
}

upstream flask {
    server localhost:5000;
}


server {
        server_name api.wott.io api-stage.wott.io default_server;

        location /mtls {
                return 403;
        }

        location /renew {
                return 403;
        }

        location /v0.1 {
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header SSL_Client $ssl_client_s_dn;
                proxy_set_header SSL_Client_Verify $ssl_client_verify;
                proxy_pass http://flask;
        }

        location /v0.2 {
                rewrite ^(/.*)$ /api$1 break;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header SSL_Client $ssl_client_s_dn;
                proxy_set_header SSL_Client_Verify $ssl_client_verify;
                proxy_pass http://django;
        }

        location /admin {
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_pass http://django;
        }

        location /static {
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_pass http://django;
        }

        listen 443 ssl; # managed by Certbot
        ssl_certificate /etc/letsencrypt/live/api.wott.io/fullchain.pem; # managed by Certbot
        ssl_certificate_key /etc/letsencrypt/live/api.wott.io/privkey.pem; # managed by Certbot
        include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
        server_name mtls.wott.io mtls-stage.wott.io;

        if ($ssl_client_verify != "SUCCESS") { return 403; }

        listen 443 ssl;
        ssl_certificate /opt/wott/certs/mtls.pem;
        ssl_certificate_key /opt/wott/certs/mtls-key.pem;
        ssl_client_certificate /opt/wott/certs/intermediate_ca.pem;
        ssl_verify_depth 2;
        ssl_verify_client on;


        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;


        location / {
                rewrite ^(/.*)$ /api/mtls$1 break;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header SSL_Client $ssl_client_s_dn;
                proxy_set_header SSL_Client_Verify $ssl_client_verify;
                proxy_pass http://django/mtls/;
        }
}


server {
        server_name renewal-api.wott.io;

        if ($ssl_client_verify != "SUCCESS") { return 403; }


        listen 443 ssl;
        ssl_certificate /opt/wott/certs/renewal-api.pem;
        ssl_certificate_key /opt/wott/certs/renewal-api-key.pem;
        ssl_client_certificate /opt/wott/certs/intermediate_ca.pem;
        ssl_verify_depth 2;
        ssl_verify_client on;


        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;


        location / {
                rewrite ^(/.*)$ /renew$1 break;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header SSL_Client $ssl_client_s_dn;
                proxy_pass http://flask/renew/;
        }
}
