version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:18.03.1-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              curl python3 py3-pynacl py3-cffi py3-bcrypt py3-cryptography
            python3 -m ensurepip
            pip3 install docker-compose
      - run:
          name: Set versions
          command: |
            echo 'export KUBECTL_VERSION="1.14.2"' >> $BASH_ENV
            echo 'export HELM_VERSION="2.14.0"' >> $BASH_ENV
      - run:
          name: Install Kubectl
          command: |
            source $BASH_ENV
            curl -L "https://storage.googleapis.com/kubernetes-release/release/v$KUBECTL_VERSION/bin/linux/amd64/kubectl" -o /usr/bin/kubectl
            chmod +x /usr/bin/kubectl
      - run:
          name: Install Helm
          command: |
            source $BASH_ENV
            curl -OL "https://storage.googleapis.com/kubernetes-helm/helm-v$HELM_VERSION-linux-amd64.tar.gz"
            tar -zxvf "helm-v$HELM_VERSION-linux-amd64.tar.gz"
            mv linux-amd64/helm /usr/bin/bin/helm
            rm -rf helm*
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - run:
          name: Build container
          command: |
            docker-compose -f ./docker-compose.tests.yml build
      - run:
          name: Run tests
          command: |
            docker-compose -f ./docker-compose.tests.yml up
      - run:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                export GITHASH="git-$(git rev-parse --short HEAD)"
                echo "$GCR_CREDS" | docker login -u _json_key --password-stdin https://gcr.io
                docker tag app "gcr.io/wott-prod/wott-api:${GITHASH}"
                docker push "gcr.io/wott-prod/wott-api:${GITHASH}"
                echo "Pushed gcr.io/wott-prod/wott-api:${GITHASH}"
            fi
