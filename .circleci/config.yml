version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:18.03.1-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              curl python3 py3-pynacl py3-cffi py3-bcrypt py3-cryptography
            python3 -m ensurepip
            pip3 install --upgrade-strategy only-if-needed docker-compose
      - run:
          name: Set environment variables
          command: |
            echo 'export KUBECTL_VERSION="1.14.2"' >> $BASH_ENV
            echo 'export HELM_VERSION="2.14.0"' >> $BASH_ENV
            echo 'export PATH=/google-cloud-sdk/bin/:$PATH' >> $BASH_ENV
            echo 'export GITHASH="git-$(git rev-parse --short HEAD)"' >> $BASH_ENV
      - run:
          name: Install gcloud
          command: |
            curl -sOL https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
            sha256sum google-cloud-sdk.tar.gz
            tar xfz google-cloud-sdk.tar.gz -C /
            rm google-cloud-sdk.tar.gz
            /google-cloud-sdk/install.sh --usage-reporting=false --path-update=false
      - run:
          name: Install Kubectl
          command: |
            source $BASH_ENV
            curl -sL "https://storage.googleapis.com/kubernetes-release/release/v$KUBECTL_VERSION/bin/linux/amd64/kubectl" -o /usr/bin/kubectl
            sha256sum /usr/bin/kubectl
            chmod +x /usr/bin/kubectl
      - run:
          name: Install Helm
          command: |
            source $BASH_ENV
            curl -sOL "https://storage.googleapis.com/kubernetes-helm/helm-v$HELM_VERSION-linux-amd64.tar.gz"
            curl -sOL "https://storage.googleapis.com/kubernetes-helm/helm-v$HELM_VERSION-linux-amd64.tar.gz.sha256"
            #sha256sum -c "helm-v$HELM_VERSION-linux-amd64.tar.gz.sha256"
            tar xfz "helm-v$HELM_VERSION-linux-amd64.tar.gz" -C /tmp
            rm "helm-v$HELM_VERSION-linux-amd64.tar.gz"
            mv /tmp/linux-amd64/helm /usr/bin/
            mv /tmp/linux-amd64/tiller /usr/bin/
      - run:
          name: Build docker images
          command: |
            docker-compose -p api build
      - run:
          name: Build docker test images
          command: |
            docker-compose -f ./docker-compose.tests.yml build
      - run:
          name: Run tests
          command: |
            docker-compose -f ./docker-compose.tests.yml run check
            docker-compose -f ./docker-compose.tests.yml run check_migrations
            docker-compose -f ./docker-compose.tests.yml run tests
      - run:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              source $BASH_ENV

                echo "$GCR_CREDS" | docker login -u _json_key --password-stdin https://gcr.io

                docker tag api_api-dev gcr.io/wott-prod/wott-api:${GITHASH}
                docker tag api_api-dev gcr.io/wott-prod/wott-api:latest
                docker tag api_nginx-static gcr.io/wott-prod/wott-static:${GITHASH}
                docker tag api_nginx-static gcr.io/wott-prod/wott-static:latest

                docker push gcr.io/wott-prod/wott-api:${GITHASH}
                docker push gcr.io/wott-prod/wott-api:latest
                docker push gcr.io/wott-prod/wott-static:${GITHASH}
                docker push gcr.io/wott-prod/wott-static:latest
                echo "Pushed gcr.io/wott-prod/wott-api:${GITHASH}"
            fi
      - run:
          name: Deploy to GKE
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              source $BASH_ENV

              gcloud config set project wott-prod
              gcloud config set compute/zone us-central1-a

              echo "$GCR_CREDS" > "$HOME/service-account.json"
              gcloud auth activate-service-account --key-file="$HOME/service-account.json"
              rm "$HOME/service-account.json"

              gcloud container clusters get-credentials cluster0
              helm init --client-only

              helm lint helm/api

              helm upgrade \
                -i api helm/api \
                --set image.tag="$GITHASH" \
                --set releaseTimeStamp="$CIRCLE_BUILD_NUM" \
                --reuse-values
            fi
