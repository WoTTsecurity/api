# Generated by Django 2.2.10 on 2020-02-26 05:27

import device_registry.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.db.models import Case, CharField, Value, When


def convert_action_id(apps, schema_editor):
    actions = {
        2: ('FirewallDisabledAction', None),
        7: ('FtpServerAction', None),
        1001: ('InsecureServicesAction', 'fingerd'),
        1002: ('InsecureServicesAction', 'tftpd'),
        1003: ('InsecureServicesAction', 'telnetd'),
        1004: ('InsecureServicesAction', 'snmpd'),
        1005: ('InsecureServicesAction', 'xinetd'),
        1006: ('InsecureServicesAction', 'nis'),
        1007: ('InsecureServicesAction', 'atftpd'),
        1008: ('InsecureServicesAction', 'tftpd-hpa'),
        1009: ('InsecureServicesAction', 'rsh-server'),
        1010: ('InsecureServicesAction', 'rsh-redone-server'),
        2004: ('OpensshIssueAction', 'AllowAgentForwarding'),
        2003: ('OpensshIssueAction', 'PasswordAuthentication'),
        2002: ('OpensshIssueAction', 'PermitRootLogin'),
        2001: ('OpensshIssueAction', 'PermitEmptyPasswords'),
        2005: ('OpensshIssueAction', 'Protocol'),
        6: ('AutoUpdatesAction', None),
        3001: ('PubliclyAccessibleServiceAction', 'mongod'),
        3002: ('PubliclyAccessibleServiceAction', 'mysqld'),
        3003: ('PubliclyAccessibleServiceAction', 'memcached'),
        3004: ('PubliclyAccessibleServiceAction', 'redis-server'),
        10: ('MySQLDefaultRootPasswordAction', None),
        12: ('CpuVulnerableAction', None),
        3: ('VulnerablePackagesAction', None)
    }
    RecommendedActionModel = apps.get_model('device_registry', 'RecommendedAction')
    newra = {}
    for action_id, class_param in actions.items():
        newra[action_id] = RecommendedActionModel(action_class=class_param[0], action_param=class_param[1], action_id=0)
    RecommendedActionModel.objects.bulk_create(newra.values())

    RecommendedActionStatusModel = apps.get_model('device_registry', 'RecommendedActionStatus')
    objs = []
    for ra in RecommendedActionModel.objects.exclude(action_id=0):
        if ra.action_id in newra:
            objs.append(RecommendedActionStatusModel(status=ra.status, snoozed_until=ra.snoozed_until,
                                                     resolved_at=ra.resolved_at, device=ra.device, ra=newra[ra.action_id]))
    RecommendedActionStatusModel.objects.bulk_create(objs)

    id_DefaultCredentialsAction = 1
    RecommendedActionModel.objects.filter(action_id=id_DefaultCredentialsAction).delete()
    RecommendedActionModel.objects.exclude(action_id=0).delete()

    Profile = apps.get_model('profile_page', 'Profile')
    GithubIssue = apps.get_model('device_registry', 'GithubIssue')
    issues = []
    for p in Profile.objects.exclude(github_issues={}):
        for ra_id, number in p.github_issues.items():
            ra_id = int(ra_id)
            if number and ra_id in newra:
                issues.append(GithubIssue(number=number, owner=p.user, ra=newra[ra_id]))
    GithubIssue.objects.bulk_create(issues)


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('device_registry', '0082_devicehistoryrecord'),
        ('profile_page', '0011_merge_20191126_0607')
    ]

    operations = [
        migrations.AddField(
            model_name='recommendedaction',
            name='action_class',
            field=models.CharField(default='', max_length=64),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='recommendedaction',
            name='action_param',
            field=models.CharField(blank=True, max_length=128, null=True),
        ),

        migrations.CreateModel(
            name='GithubIssue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, null=True)),
                ('number', models.IntegerField(default=0)),
                ('closed', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ra', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='device_registry.RecommendedAction')),
            ],
        ),

        migrations.CreateModel(
            name='RecommendedActionStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(
                    choices=[(device_registry.models.RecommendedAction.Status(0), 0),
                             (device_registry.models.RecommendedAction.Status(1), 1),
                             (device_registry.models.RecommendedAction.Status(2), 2),
                             (device_registry.models.RecommendedAction.Status(3), 3),
                             (device_registry.models.RecommendedAction.Status(4), 4)], default=0)),
                ('snoozed_until', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='device_registry.Device')),
                ('ra', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                         to='device_registry.RecommendedAction')),
            ],
            options={
                'unique_together': {('device', 'ra')},
            },
        ),

        migrations.AlterField(
            model_name='recommendedaction',
            name='device',
            field=models.ForeignKey(to='device_registry.Device', on_delete=models.CASCADE, null=True)
        ),

        migrations.RunPython(convert_action_id)
    ]
