# Generated by Django 2.1.10 on 2019-07-16 06:52

import django.contrib.postgres.fields.jsonb
from django.db import migrations


def gather_kv_fields_to_jsonfields(apps, schema_editor):
    """
    Collects all key / value pairs of each owner's credentials into json fields.
    Grouping by name + linux_user
    """
    Credential = apps.get_model('device_registry', 'Credential')
    pk_to_remove = []
    records_to_update = {}

    for credential in Credential.objects.all():
        cid = f'{credential.owner_id},{credential.name},{credential.linux_user}'
        if cid not in records_to_update:
            records_to_update[cid] = {
                'pk': credential.pk,
                'data': {credential.key: credential.value},
                'tags': credential.tags.get_tag_list()
            }
        else:
            pk_to_remove.append(credential.pk)
            records_to_update[cid]['data'].update({credential.key: credential.value})
            tags = credential.tags.get_tag_list()
            for tag in tags:
                if tag not in records_to_update[cid]['tags']:
                    records_to_update[cid]['tags'].append(tag)

    for cid in records_to_update:
        credential = Credential.objects.get(pk=records_to_update[cid]['pk'])
        credential.data = records_to_update[cid]['data']
        credential.save(update_fields=['data'])
        credential.tags.set(*records_to_update[cid]['tags'])
    Credential.objects.filter(pk__in=pk_to_remove).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('device_registry', '0051_pairingkey'),
    ]

    operations = [
        migrations.AddField(
            model_name='credential',
            name='data',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict),
        ),
        migrations.RunPython(gather_kv_fields_to_jsonfields),
    ]
