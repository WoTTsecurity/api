- title: Permissive firewall policy detected
  id: 2
  subtitle: change to a more restrictive policy
  short: |
    Permissive firewall policy detected. Permissive firewall policies permit all traffic unless otherwise specified. Note that you can have different firewall policies for incoming (ingress) and outgoing (egress) traffic, so check both. Consider changing your policy to be more restrictive, either by implementing rules to your permissive policy, or setting it to restrictive.
  long: |
    Firewall policies typically come in two modes: permissive (sometimes known as passive) or restrictive. Permissive policies permit all traffic unless otherwise specified, but these rules can be complex to implement depending on the firewall provider. Restrictive policies essentially do the opposite, they deny all traffic unless otherwise specified. This is the most secure option as it requires manual editing of the access control list.

    In order to be as secure as possible, configure your policy to be as specific as possible. Your source IP address, target IP address, and destination port for traffic should be specified and the range of such should be as minimal as possible. Avoid using 'any' where possible, the only scenario where this can't be the case is if you have a service that should be available to all internet users. So you may want to configure access to your port 80/tcp (HTTP) or 443/tcp (HTTPS) to 'any', but ensure access to other back-end services such as a database is limited.

    Alternatively, implement more rules to your permissive policy (although this is still not recommended). Both ingress and egress traffic can be configured to go through different firewall policies. Make sure to check both for security weaknesses.

    You can configure your firewall directly using the WoTT Dashboard either on a per-node basis (available under the Security tab) or using a group policy.

- title: Default credentials detected
  id: 1
  subtitle: consider changing your credentials
  short: |
    We've detected default or weak credentials, such as ones predetermined at manufacturing, or common credentials; classic examples of this include having 'password' as your password. Change your credentials to something more secure.
  long: |
    Default credentials refers to when common or pre-determined credentials like login combinations are used, thus leaving devices vulnerable to simple dictionary attacks. This is what enabled malware like Mirai. These are typically common username and password combinations that manufacturers implement to make the initial set up of a piece of equipment easier. For example, the default username 'pi' and password 'raspberry' for Raspberry Pi or the user 'admin' and the password 'admin' on many routers.

    The most common devices that use default credentials are typically, but not limited to, IoT devices, such as internet modems, cameras, and PCB based technologies such as Raspberry Pis; some virtual machines appliances, and some Linux distributions with a default root or admin user. These credentials are intended to be temporary and updated by the user shortly after set up.

    WoTT's agent automatically scans your devices against data from Mirai and against other common credentials. We strongly recommend that you quickly resolve this issue by changing your password to a more secure one. Avoid passwords such as 123, password, and other variations of, and do not distribute your password to anyone. To be more secure, consider changing username as well. Default credentials will lower your node's Trust Score.
#  terminal_title: None for now. Later to be replaced with a passwd command.
#  terminal_code: |
#    $ code one
#    # code too

- title: An FTP service has been detected
  id: 7
  subtitle: consider disabling FTP and switching to a new service
  short: |
    We have detected an FTP service. FTP is an insecure method of transferring files, as they are unencrypted and run on
    insecure protocols. Consider switching to a more secure service such as SFTP or FTPS.
  long: |
    FTP relies on clear-text usernames and passwords for authentication. The data transferred using this protocol is unencrypted and insecure. This means the data is vulnerable to sniffing, spoofing and brute force attacks. These are just some of the many vulnerabilities of FTP.

    Alternatives to FTP that are more secure are:

    **SFTP**

    * Uses encryption during data transmission. This makes the data incredibly difficult/near impossible to decipher.
    * Supports public key authentication. Impervious to brute force attacks and is a secure way of identifying users of the network.
    * Uses data integrity and authenticity checks. This verifies that the contents of the original file are unchanged and that they came from a legit source.
    * Host Authentication. This enables clients to verify whether or not the server they are connecting to is the one they intended.

    **FTPS**

    * FTPS uses certificates to encrypt communication (similar to public key authentication). Certain tools allow certificates to be requested and created.
    * When a trusted certificate authority signs these certificates, it acts as an ensurer that the client is being connected to a trusted and secure server. This can prevent a Man-in-the-Middle attack.
    * Learn more about FTPS [here](https://www.serv-u.com/solutions/what-is-file-transfer-protocol-secure).

    We do recommend SFTP as that is the easiest to setup and has a decent level of security. Depending on the size of your organisation and resources it can offer, FTPS can be a formidable line of defense to protect your data.

    Two of the tried and tested services that we recommend are:

    [proftpd](http://proftpd.org)
    [vsftpd](https://help.ubuntu.com/community/vsftpd)
  terminal_title: |
    To uninstall your FTP server, run the following command:
  terminal_code: |
    $ sudo apt-get purge ${{FTP-PACKAGE}}

- title: Insecure service found ({service})
  subtitle: uninstall service
  id: 1000
  short: |
    We have detected {service} installed. This service may either be outdated or inherently insecure.
    It is recommended that you uninstall this service as soon as possible.
  long: |
    There are multiple generations of services. Many older services, like Telnet, RSH, and FTP are still readily available in most Linux distributions. However, it is generally considered bad practice to use these nowadays as they are often unencrypted in transit, meaning that sensitive data, such as passwords and content can be intercepted in transit. Moreover, older and insecure services may expose your system to attacks. We recommend for your security to either uninstall these services or disable them and use more secure alternatives that provide better security.
  terminal_title: |
    To uninstall the insecure service, run:
  terminal_code: |
    $ sudo apt-get purge {service}

- title: Agent forwarding enabled for OpenSSH
  id: 2004
  subtitle: consider disabling this
  short: |
    It appears that you have Agent forwarding enabled in your OpenSSH config. If enabled, an attacker who have already compromised the server could use this to steal your SSH keys.
  long: |
    SSH (Secure Shell) is a method to remote login to a server. SSH is usually secure, however if used with the default settings, can be vulnerable to attacks from unwanted parties. By default, the SSH config file is preset with some values allowing for new developers to get used to setting up SSH servers. However, this often exposes vulnerabilities by not being restrictive enough.

    We've detected that `AllowAgentForwarding` is enabled. This means that you can SSH into one host and from there to a different host using the SSH key on your local machine. This might be the case if you cannot directly access the final host (for instance if you're using a [Bastion host](https://en.wikipedia.org/wiki/Bastion_host\)). However, doing so leaves a socket open on the server, which then can be attacked.

    Unless you need this feature, we recommend you disable this feature by edit the `/etc/ssh/sshd_config` file like so:

    ```
    AllowAgentForwarding no
    ```

    For more information on how to secure OpenSSH, see our larger tutorial [here](https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security).
  terminal_title: |
    Here are the steps to resolve this issue.
  terminal_code: |
    Find your sshd_config file
    $ find /etc -iname sshd_config

    Open the file above in your favorite editor
    $ sudo vim /path/to/sshd_config

    Find the line that says 'AllowAgentForwarding', and change it into 'AllowAgentForwarding no'.
    If the line does not exist, add it. Also, please note that lines starting with '#' are disabled

    Once you've added the line, make sure to restart SSH by running
    $ sudo service ssh restart

- title: Password authentication enabled for OpenSSH
  id: 2003
  subtitle: consider disabling this
  short: |
    It appears that you have password authentication enabled in your OpenSSH config which may leave your entire machine vulnerable to brute-force attacks.
  long: |
    SSH (Secure Shell) is a method to remote login to a server. SSH is usually secure, however if used with the default settings, can be vulnerable to attacks from unwanted parties. By default, the SSH config file is preset with some values allowing for new developers to get used to setting up SSH servers. However, this often exposes vulnerabilities by not being restrictive enough.

    We've detected that `PasswordAuthentication` is enabled. Passwords can easily be exploited and brute-forced due to human error and is less secure than identifying using SSH keys.

    Where possible, it is ideal to completely remove the need for passwords to improve your security posture.

    **Warning:** Before you disable password authentication, make sure that you have [generated and installed](https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-1604\) your SSH keys on the remote server. Failure to do so will result in that you will be locked out of your server.

    Edit the `/etc/ssh/sshd_config` file like so:

    ```
    PasswordAuthentication no
    ```

    Once you've updated the configuration, make sure to restart the SSH server using `sudo service ssh restart`.

    For more information on how to secure OpenSSH, see our larger tutorial [here](https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security).
  terminal_title: |
    Here are the steps to resolve this issue.
  terminal_code: |
    Find your sshd_config file
    $ find /etc -iname sshd_config

    Open the file above in your favorite editor
    $ sudo vim /path/to/sshd_config

    Find the line that says 'PasswordAuthentication', and change it into 'PasswordAuthentication no'.
    If the line does not exist, add it. Also, please note that lines starting with '#' are disabled

    Once you've added the line, make sure to restart SSH by running
    $ sudo service ssh restart

- title: Root login enabled for OpenSSH
  id: 2002
  subtitle: consider disabling this
  short: |
    It appears that you have root login enabled in your OpenSSH config which increases the probability of a the node being compromised from a brute-force attack (in particular if you have not disabled password authentication).
  long: |
    SSH (Secure Shell) is a method to remote login to a server. SSH is usually secure, however if used with the default settings, can be vulnerable to attacks from unwanted parties. By default, the SSH config file is preset with some values allowing for new developers to get used to setting up SSH servers. However, this often exposes vulnerabilities by not being restrictive enough.

    We've detected that `PermitRootLogin` is enabled. A common attack is brute forcing the login of superuser and thereby compromising the entire machine rather than on a user-by-user basis. First, ensure you are able to use an SSH login on a non-root user. Once you have confirmed this, disable the root login by changing the `/etc/ssh/sshd_config` file to have the following line:

    ```
    PermitRootLogin no
    ```

    Once you've updated the configuration, make sure to restart the SSH server using `sudo service ssh restart`.

    For more information on how to secure OpenSSH, see our larger tutorial [here](https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security).
  terminal_title: |
    Here are the steps to resolve this issue.
  terminal_code: |
    Find your sshd_config file
    $ find /etc -iname sshd_config

    Open the file above in your favorite editor
    $ sudo vim /path/to/sshd_config

    Find the line that says 'PermitRootLogin', and change it into 'PermitRootLogin no'.
    If the line does not exist, add it. Also, please note that lines starting with '#' are disabled

    Once you've added the line, make sure to restart SSH by running
    $ sudo service ssh restart

- title: Empty passwords permitted for OpenSSH
  id: 2001
  subtitle: consider disabling this
  short: |
    It appears that you have empty passwords enabled in your OpenSSH config. If enabled, an attacker may be able to access your system without a password.
  long: |
    SSH (Secure Shell) is a method to remote login to a server. SSH is usually secure, however if used with the default settings, can be vulnerable to attacks from unwanted parties. By default, the SSH config file is preset with some values allowing for new developers to get used to setting up SSH servers. However, this often exposes vulnerabilities by not being restrictive enough.

    We've detected that `PermitEmptyPasswords` is enabled. This means a user can make changes or access your information without needing a password to authenticate, as the password field is optional (can be empty). This is particularly dangerous for example if the root user has an empty password. This is not recommended in any instance, particularly over the internet.

    To disable this, access and change the `/etc/ssh/sshd_config` file like so:

    ```
    PermitEmptyPasswords no
    ```

    For more information on how to secure OpenSSH, see our larger tutorial [here](https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security).
  terminal_title: |
    Here are the steps to resolve this issue.
  terminal_code: |
    Find your sshd_config file
    $ find /etc -iname sshd_config

    Open the file above in your favorite editor
    $ sudo vim /path/to/sshd_config

    Find the line that says 'PermitEmptyPasswords', and change it into 'PermitEmptyPasswords no'.
    If the line does not exist, add it. Also, please note that lines starting with '#' are disabled

    Once you've added the line, make sure to restart SSH by running
    $ sudo service ssh restart

- title: Insecure protocol option enabled for OpenSSH
  id: 2005
  subtitle: consider disabling this
  short: |
    It appears that you have enabled protocol 1 for OpenSSH. This protocol is outdated and insecure, consider exclusively using protocol 2.
  long: |
    SSH (Secure Shell) is a method to remote login to a server. SSH is usually secure, however if used with the default settings, can be vulnerable to attacks from unwanted parties. By default, the SSH config file is preset with some values allowing for new developers to get used to setting up SSH servers. However, this often exposes vulnerabilities by not being restrictive enough.

    We've detected that the option to use protocol 1 in `Protocol` is enabled. Protocol 1 is insecure compared to protocol 2 as it is vulnerable to insertion attacks and is weak cryptographically. By default OpenSSH will opt to use protocol 2 and in failing that, protocol 1. However, the option to use protocol 1 at all is still unsafe. We suggest that you remove the secondary preference for protocol 1 and disable it as an option at all.

    To do so, access and change the `/etc/ssh/sshd_config` file like so:

    ```
    Protocol 2
    ```

    For more information on how to secure OpenSSH, see our larger tutorial [here](https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security).
  terminal_title: |
    Here are the steps to resolve this issue.
  terminal_code: |
    Find your sshd_config file
    $ find /etc -iname sshd_config

    Open the file above in your favorite editor
    $ sudo vim /path/to/sshd_config

    Find the line that says 'Protocol', and change it into 'Protocol 2'.
    If the line does not exist, add it. Also, please note that lines starting with '#' are disabled

    Once you've added the line, make sure to restart SSH by running
    $ sudo service ssh restart

- title: Automatic security updates not enabled
  id: 6
  subtitle: enable automatic security updates
  short: |
    Automatic security updates may not be enabled. By enabling this feature, your node will automatically install security updates as they become available, which reduce the attack surface of your node.
  long: |
    Automatic security updates by default are not enabled on most Linux distributions. However, not doing so could leave you vulnerable as software exploits are found and not corrected for leaving them outdated and open to attack.

    While there is a chance that this will impact the stability of a service, it is generally considered worth the risk in order to improve the security posture.

    Each Linux distribution has slightly different methods of setting up automatic security updates, however for many, including Debian and Ubuntu, you can use the `unattended-upgrades` package. To do so make sure the package is installed:

    ```
    $ sudo apt-get install unattended-upgrades apt-listchanges
    ```

    You will need to edit the default configuration file `/etc/apt/apt.conf.d/50unattended-upgrades` using your preferred editor.

    Note, the necessary changes vary by distribution. For more detail, you can see [here](https://wiki.debian.org/UnattendedUpgrades) for Debian or [here](https://help.ubuntu.com/lts/serverguide/automatic-updates.html) for Ubuntu.

    You will then need to create a `/etc/apt/apt.conf.d/20auto-upgrades` file or edit the pre-existing one, which is typically empty, to set up automatic updates.
    Paste the following, replacing the `x` values with the frequency at which you want updates:

    ```
    APT::Periodic::Update-Package-Lists "x";
    APT::Periodic::Download-Upgradeable-Packages "x";
    APT::Periodic::AutocleanInterval "x";
    APT::Periodic::Unattended-Upgrade "x";
    ```
    We recommend setting most of these to `1` to get daily updates. `AutocleanInterval` can be done weekly, so set to `7`.
  terminal_title: |
    Here are the steps to resolve this issue.
  terminal_code: |
    Install the 'unattended-upgrades' package by running
    $ sudo apt-get install unattended-upgrades

    The defaults should be sufficient for most use cases, but if you want to tweak the settings, you can either use the instructions in the detailed view above, or use the TUI tool (which provides fewer options)
    $ sudo dpkg-reconfigure unattended-upgrades

- title: Remote access on MongoDB detected
  id: 3001
  subtitle: consider disabling remote access
  short: |
    We detected that a MongoDB instance may be accessible remotely. This may allow a remote attacker to gain access to your database and leak customer data. According to [Shodan](\https://www.shodan.io/\), there are over 70,000 publicly exposed MongoDB servers. Don't be one of them. Consider either blocking port 27017 through the WoTT firewall management tool, or reconfigure MongoDB to only listen on localhost.
  long: |
    MongoDB is a widely used NoSQL database. Unfortunately, the default configuration in MongoDB until relatively recently was to bind on all public interfaces (rather than just localhost). Because of this, many MongoDB servers were made publicly accessible. To make matters worse, by default, MongoDB does not require any authentication, meaning that the potential attacker only needed to know the public IP of the server in order to connect and access your customer data.


    We recommend that you either reconfigure your MongoDB instance to only listen on localhost (assuming the appserver talking to MongoDB runs on the same server), or creating a firewall policy to only allow connections from your appservers to port 27017 on your node. You can do the latter using WoTT's firewall management tool. You can read more about MongoDB's ports [here](https://docs.mongodb.com/manual/reference/default-mongodb-port/\).

    To reconfigure your MongoDB instance to only listen on localhost, edit the config file (usually `/etc/mongod.conf`) and add/edit the following line:

    ```
    bind_ip = 127.0.0.1
    ```

    Please remember to restart your MongoDB instance as this change will not take effect until you do so. For more information on how to securely configure your MongoDB instance, WoTT has a step-by-step guide to aid you.
- title: Remote access on MySQL/MariaDB instance detected
  id: 3002
  subtitle: consider disabling remote access
  short: |
    We detected that a MySQL/MariaDB instance may be accessible remotely. Consider either blocking port 3306 through the WoTT firewall management tool, or reconfigure MySQL to only listen on localhost to prevent customer data leakage.
  long: |
    MySQL remains one of the most, if not the most, popular Relational Database Management System (RDMS) databases.

    In most configurations, remote access is usually disabled. However, depending on the configuration and environment, it may be necessary to allow network access to your MySQL access (such as if you have other servers on the network talking to the server). In such instances, it is recommended that you configure a locked down firewall policy that only allows access from these servers. Failure to do so, may expose your MySQL server to the rogue actors on the internet, which may cause leakage of customer data.

    WoTT's firewall management tool has a feature that allows you to block the port 3306, which is the port used by MySQL for remote access. If no network access is needed, we recommend that you can reconfigure the MySQL configuration file to only listen on localhost. To do so, find your configuration file usually located at `/etc/mysql/my.cnf` (but varies between distributions) and add or edit the following line:

    ```
    bind-address=127.0.0.1
    ```

    Please remember to restart your MySQL instance as this will not take effect until you do so.

  terminal_title: |
    To update the disable remote/network access on your MySQL/MariaDB instance, take the following steps
  terminal_code: |
    Find your file MySQL/MariDB configuration file
    $ sudo find /etc -type f -name my.cnf -o -name mysqld.cnf -o -name 50-server.cnf

    Once located, open the file in your favorite editor
    $ sudo vim /path/from/command/above

    Once inside the file, locate line 'bind-address' and set it to 'bind-address=127.0.0.1'.
    With that done, restart the server
    $ sudo service mysql restart

- title: No root password set for MySQL/MariaDB server
  id: 10
  subtitle: NO SUBTITLE
  short: |
    We have detected that you may have set a root password for MySQL/MariaDB. Not having a root password set makes it easy for anyone with access to the server (or the network where the server is hosted) to copy all customer data from the database. It is recommended that you set a password as soon as possible.
  long: |
    By default, MySQL/MariaDB is set up with no root password. A root account is likened to a super user, anyone with access to a root account can and may do whatever they wish with a database. This includes copying customer/internal data they should not have access to.

    We highly recommend you set a root password as soon as possible. However, for applications, it is important to have separate, application specific credentials with locked down permission to the given database to reduce the blast radios in case the the credentials get leaked.

    **Pro-tip**: If you are using `mysqladmin` and pass on the password from the command line, make sure to add a space before the command to avoid it being stored in your shell's history.
  terminal_title: |
    To update the root password, use the following command. Please note that on Ubuntu, you may need to use `sudo` to run the command below.
  terminal_code: |
    $ mysqladmin -u root password NEWPASSWORD

- title: Your Memcached instance may be publicly accessible
  id: 3003
  subtitle: reconfigure Memcached
  short: |
    Your Memcached instance may be accessible remotely. This is likely due to use of a default configuration. According to [Shodan](\https://www.shodan.io/\), there are over 57,000 publicly exposed Memcached servers on the internet. We recommend that you reconfigure this service to avoid leaking customer data.
  long: |
    Memcached is a popular caching server. By default, many Memcached configurations will listen on all interfaces. This may be desirable in some configurations (e.g. when you have other services on the network that needs to talk to Memcached). In that case, we recommend that you create a firewall policy that only allows these servers to access Memcached. If however you only use Memcached locally, we recommend that you reconfigure Memcached to only listen on the loopback (localhost) interface.

    We also recommend that you disable UDP (and just use TCP) in Memcached as in early in 2018, an exploit in Memcached's UDP communication was discovered. Using this exploit, an attacker was able to use a publicly exposed Memcached server to relay a payload and attack a 3rd party server/service, leading to large scale attacks across the internet.

  terminal_title: |
    To reconfigure Memcached, run take the following steps
  terminal_code: |
    Find your memcached configuration file
    $ find /etc -iname memcached.conf

    Edit the file using your favorite editor
    $ sudo vim /path/to/memcached.conf

    You now need to add (or modify) two lines. Edit (or add) a line for '-l 127.0.0.1' and another one for '-U 0'.

    When you're done, restart memcached by running
    $ sudo service memcached restart

- title: System contains Meltdown and/or Spectre vulnerabilities
  id: 12
  subtitle: update your system
  short: |
    Your system appears to be vulnerable to the [Meltdown](https://meltdownattack.com/meltdown.pdf) and [Spectre](https://spectreattack.com/spectre.pdf) attacks. This could compromise your data by allowing unwanted access to sensitive data through bypassing hardware restrictions.
  long: |
    [Meltdown](https://meltdownattack.com/meltdown.pdf) and [Spectre](https://spectreattack.com/spectre.pdf) vulnerabilities were found in 2018, effectively affecting every computer-based hardware manufactured in the last 20 years. There are 3 common vulnerabilities, 2 encompass what is known as Spectre; the other is Meltdown. If exploited, these vulnerabilities could allow for access to what was previously thought of as protected data.

    Meltdown bypasses hardware security boundaries between applications and the operating systems and uses this to gain access to memory based on 'out of order' sequencing. Intel chips manufactured since 2010 were reported to be vulnerable to these issues. Spectre also acts at a hardware level by essentially 'tricking' a program into executing a sequence it wouldn't normally by exploiting the speculative logic systems in a chip.

    Meltdown vulnerabilities are easier to exploit than Spectre, but Spectre attacks are harder to mitigate. Software updates are available in most operating systems to protect against these vulnerabilities, so it is imperative that if you have affected hardware that you are up to date. While there are no actual attacks recorded to date, rather as a proof of concept, it cannot be said for certain that no attacks have taken place given that they would not be recorded.
  terminal_title: |
    To update your operating system, run the following commands:
  terminal_code: |
    $ sudo apt-get update
    $ sudo apt-get upgrade

- title: A Redis instance may be publicly accessible
  id: 3004
  subtitle: NO SUBTITLE
  short: |
    Your Redis instance may be publicly accessible. This could cause accidental customer data leakage. According to [Shodan](\https://www.shodan.io/\), there are over 640,000 publicly exposed Redis servers on the internet. Consider re-configuring your Redis to listen only on the localhost, or add a lock down the access to Redis using a firewall if it needs to be accessible on the network.
  long: |
    Redis is an open-source data store with several uses, but most often used for caching. Unfortunately, Redis does not have any robust security features of its own, and is intended for use by trusted clients in a trusted network. It is therefore not recommended to have a Redis instance exposed over the internet.

    Because many default configurations of many Redis installations binds on all public network interfaces, there has been countless examples of Redis instances being publicly available over the internet, which in turn has lead to data leaks.

    If you don't need your Redis installation to be accessible over the network, we recommend that you re-configure Redis to only bind on the loopback/localhost interface to avoid this. If on the other hand you do need your Redis instance to be accessible over the network, we recommend that you create a firewall policy that only allows a select number of servers to talk to the Redis instance, while also setting a Redis password.

    If you need network access to Redis, you can create a firewall policy using the WoTT Dashboard. By default, Redis uses port 6379/tcp.
  terminal_title: |
    To reconfigure Redis, take the following steps
  terminal_code: |
    Find the Redis configuration file
    $ find /etc -iname redis.conf

    Open the configuration file using your favorite editor
    $ vim /path/to/redis.conf

    Locate the line 'bind' and change it to 'bind 127.0.0.1'. Do note that lines starting with '#' will be ignored.

    You may also want to add the line 'requirepass SuperSecretPassword' to add authentication to your Redis server. Please note that you also need to configure this in your clients. Otherwise they will be unable to connect.

    When you're done, restart Redis by running
    $ sudo service redis restart


- title: Vulnerable packages found
  id: 3
  subtitle: update or remove packages
  short: |
    Vulnerable packages have been found. These packages may be exploitable by an attacker to gain access to, or escalate permissions, on your servers. Make sure packages are up to date. You can learn more about the exact packages under the [Vulnerabilities tab](/cve).
  long: |
    Packages are a key part of most Linux based operating systems software. Typically when installing additional software onto Linux systems, it comes in pre-compiled packages. Depending on your Linux distribution, the package manager will differ (e.g. Debian/Ubuntu users `.deb` packages whereas RedHat/Fedora/Amazon uses '.rpm'. packages).

    Over time, if not updated, these packages often become vulnerable to security risks leaving them open to exploitation from external attackers. These operating system packages can then be used by an attacker to gain access to your server, or to escalate permission them.

    Assuming you using a Linux distribution that is still maintained (you can check the End-of-Life date under the "software" tab on each node), there should be security updates available.

    WoTT can detect an out-of-date or insecure package and alert you about this. Do however note that in some instances, there is a known vulnerabilities that have been identified, but yet to be patched by the operating system vendors.

    Also, for those new to security, it is worth pointing out that when a security issue is reported and identified, it is reported into the Common Vulnerabilities and Exposures (CVE) database. The most common authority for this is the [mitre](https://cve.mitre.org/) CVE database.
  terminal_title: |
    To upgrade your packages, please run:
  terminal_code: |
    $ sudo apt-get update
    $ sudo apt-get upgrade

- title: Enable our GitHub integration for improved workflow
  id: -1
  subtitle: Streamline the remediation process and assign issues to team members.
  short: |
    You can integrate GitHub with WoTT. By doing so, GitHub Issues will automatically be generated based on your Recommended Actions. These can then be scheduled into sprints and assigned to team members.
  long: |
    To get started with WoTT's GitHub integration, click the menu in the upper right-hand side of your screen and select 'GitHub Integration' and follow the steps.

    Your Recommended Actions will then automatically be turned into GitHub Issues as they appear. Moreover, we will also automatically update said GitHub issues as the Recommended Actions are being updated. For instance, if the Recommended Action has been resolved, the GitHub Issue will automatically get closed.

- title: Install the agent on your node(s) to get started
  id: -2
  subtitle: Without any nodes, we can't provide you with any insights.
  short: |
    WoTT uses an agent to perform the security audit. Without the agent installed on any of your servers, we are unable to provide you with any insights on your security posture.
  long: |
    To get started, you need to install our [agent](https://github.com/WoTTsecurity/agent) on your servers. The agent performs a security audit, which is then sent to our back-end for processing. With this data, we are able to provide you with tailored recommendations for how to improve your security posture.

    For the security minded people, we are happy to let you know that the agent is fully open source, so you can inspect the code base before you install it if you so desire.

    While the installation instructions below are useful for installing on small number of hosts, we also have an [Ansible Playbook](\https://github.com/WoTTsecurity/examples/tree/master/ansible) if you want to deploy the agent to a larger fleet of servers.
  terminal_title: |
    To install the agent, run the following command:

    [Supported Operating Systems](https://github.com/WoTTsecurity/agent#supported-operating-systems\)
  terminal_code: |
    $ export CLAIM_TOKEN="x"
    $ curl -sL https://install.wott.io | sudo -E bash
