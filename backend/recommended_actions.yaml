- title: Permissive firewall policy detected
  id: 2
  subtitle: change to a more restrictive policy
  short: |
    Permissive firewall policy detected. Permissive firewall policies permit all traffic unless otherwise specified.
    Note that you can have different firewall policies for ingoing (ingress) and outgoing (egress) traffic, so check
    both. Consider changing your policy to be more restrictive, either by implementing rules to your permissive policy,
    or setting it to restrictive.
  long: |
    Firewall policies typically come in two modes: permissive (sometimes known as passive) or restrictive. Permissive
    policies permit all traffic unless otherwise specified, but these rules can be complex to implement depending on the
    firewall provider. Restrictive policies essentially do the opposite, they deny all traffic unless otherwise
    specified. This is the most secure option as it requires manual editing of the access control list.

    In order to be as secure as possible, configure your policy to be as specific as possible. Your source IP address,
    target IP address, and destination port for traffic should be specified and the range of such should be minimal.
    Avoid using `any` where possible, the only scenario where this can't be the case is if you have a service that
    should be available to all internet users. So you may want to configure access to your `HTTPS` address as `any`,
    but ensure access to other backend services such as a database is limited.

    Alternatively, implement more rules to your permissive policy (although this is still not recommended). Both ingress
    and egress traffic can be configured to go through different firewall policies. Make sure to check both for security
    weaknesses.
- title: Default credentials detected
  id: 1
  subtitle: please consider changing this as soon as possible
  short: |
    You may be using default credentials, such as ones predetermined at manufacturing, or common credentials; classic
    examples of this include having 'password' as your password. Change your credentials to something more secure.
  long: |
    Default credentials refers to when common or pre-determined credentials like login combinations are used, thus
    leaving devices vulnerable to simple dictionary attacks. This is what enabled malware like Mirai. These are
    typically common username and password combinations that manufacturers implement to make the initial set up of a
    piece of equipment easier. For example, the default username `pi` and password `raspberry` for Raspberry Pi.

    The most common devices that use default credentials are typically, but not limited to, IoT devices, such as
    internet modems, cameras, and PCB based technologies such as Raspberry Pis; some virtual machines appliances, and
    some Linux distributions with a default root user. These credentials are intended to be temporary and updated by the
    user shortly after set up.

    WoTT's agent automatically scans your devices against data from Mirai and against other common credentials. We
    strongly recommend that you quickly resolve this issue by changing your password to a more secure one. Avoid
    passwords such as 123, password, and other variations of, and do not distribute your password to anyone. To be more
    secure, consider changing username as well. Default credentials will lower your node's Trust Score.
  terminal_title: This is terminal title
  terminal_code: |
    $ code one
    # code too
- title: An FTP service has been detected
  id: 7
  subtitle: consider disabling FTP and switching to a new service
  short: |
    We have detected an FTP service. FTP is an insecure method of transferring files, as they are unencrypted and run on
    insecure protocols. Consider switching to a more secure service such as SFTP or FTPS.
  long: |
    FTP relies on clear-text usernames and passwords for authentication. The data transferred using this protocol is unencrypted and insecure. This means the data is vulnerable to sniffing, spoofing and brute force attacks. These are just some of the many vulnerabilities of FTP.

    Alternatives to FTP that are more secure are:

    **SFTP**

    * Uses encryption during data transmission. This makes the data incredibly difficult/near impossible to decipher.
    * Supports public key authentication. Impervious to brute force attacks and is a secure way of identifying users of the network.
    * Uses data integrity and authenticity checks. This verifies that the contents of the original file are unchanged and that they came from a legit source.
    * Host Authentication. This enables clients to verify whether or not the server they are connecting to is the one they intended.

    **FTPS**

    * FTPS uses certificates to encrypt communication (similar to public key authentication). Certain tools allow certificates to be requested and created.
    * When a trusted certificate authority signs these certificates, it acts as an ensurer that the client is being connected to a trusted and secure server. This can prevent a Man-in-the-Middle attack.
    * Learn more about FTPS [here](https://www.serv-u.com/solutions/what-is-file-transfer-protocol-secure).

    We do recommend SFTP as that is the easiest to setup and has a decent level of security. Depending on the size of your organisation and resources it can offer, FTPS can be a formidable line of defense to protect your data.

    Two of the tried and tested services that we recommend are:

    [proftpd](http://proftpd.org)
    [vsftpd](https://help.ubuntu.com/community/vsftpd)
- title: Insecure service found
  subtitle: uninstall service
  id: 1000
  short: |
    You may have insecure services installed. These services may either be outdated or inherently insecure due to lack
    of encryption of information like usernames and passwords, or the use of insecure protocols. Using these services
    over the internet greatly increases your risk of being intercepted by 'man-in-the-middle' attacks. Remove and
    uninstall these by running `sudo apt-get purge {service}`.
  long: |
    There are multiple generations of services. Many older services, like Telnet, RSH, and FTP are still readily
    available in most Linux distributions. However, it is generally considered bad practice to use these nowadays as
    they are often unencrypted in transit, meaning that sensitive data, such as passwords, can be intercepted in
    transit. Moreover, older and insecure services may expose your system to attacks. We recommend for your security to
    either uninstall these services or disable them and use more secure alternatives that provide better security.

    We recommend for your security to either uninstall these services or disable them.
- title: Agent forwarding enabled for OpenSSH
  id: 2004
  subtitle: consider disabling this
  short: |
    It appears that you have Agent forwarding enabled in your OpenSSH config which may leave your entire machine vulnerable to attack. Please consider disabling this in your config file `/etc/ssh/sshd_config`.
  long: |
    SSH (Secure Shell) is a method to remote login to a server. SSH is usually secure, however if used with the default settings, can be vulnerable to attacks from unwanted parties. By default, the SSH config file is preset with some values allowing for new developers to get used to setting up SSH servers. However, this often exposes vulnerabilities by not being restrictive enough.

    Here, `AllowAgentForwarding` is enabled. This means that you can SSH into one host and from there to a different host. This might be the case if you cannot directly access the final host. However, doing so leaves a socket open on your machine. You can essentially be impersonated by the first host by anyone with permission to access that node. It is unnecessarily risky and we recommend you disable this. Edit the `/etc/ssh/sshd_config` file like so:

    ```
    AllowAgentForwarding no
    ```

    For more information on how to secure OpenSSH, see our larger tutorial [here](https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security)
- title: Password authentication enabled for OpenSSH
  id: 2003
  subtitle: consider disabling this
  short: |
    It appears that you have Password authentication enabled in your OpenSSH config which may leave your entire machine vulnerable to attack. Please consider removing this in your config file `/etc/ssh/sshd_config`.
  long: |
    SSH (Secure Shell) is a method to remote login to a server. SSH is usually secure, however if used with the default settings, can be vulnerable to attacks from unwanted parties. By default, the SSH config file is preset with some values allowing for new developers to get used to setting up SSH servers. However, this often exposes vulnerabilities by not being restrictive enough.

    Here, `PasswordAuthentication` is enabled. Passwords can easily be exploited and brute-forced due to human error and is less secure than identifying an accessor via cryptographic identity. Where possible, it is ideal to completely remove the need for passwords as no password is truly safe/uncrackable. Edit the /etc/ssh/sshd_config file like so:

    ```
    PasswordAuthentication no
    ```

    For more information on how to secure OpenSSH, see our larger tutorial [here](https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security)
- title: Root login enabled for OpenSSH
  id: 2002
  subtitle: consider disabling this
  short: |
    It appears that you have Root login enabled in your OpenSSH config which may leave your entire machine vulnerable to attack. Please consider disabling this in your config file `/etc/ssh/sshd_config`.
  long: |
    SSH (Secure Shell) is a method to remote login to a server. SSH is usually secure, however if used with the default settings, can be vulnerable to attacks from unwanted parties. By default, the SSH config file is preset with some values allowing for new developers to get used to setting up SSH servers. However, this often exposes vulnerabilities by not being restrictive enough.

    Here, PermitRootLogin is enabled. A common attack is brute forcing the login of superuser and thereby compromising the entire machine rather than on a user-by-user basis. First, ensure you are able to use an SSH login on a non-root user. Once you have confirmed this, disable the Root login by changing the /etc/ssh/sshd_config file like so:

    ```
    PermitRootLogin no
    ```

    For more information on how to secure OpenSSH, see our larger tutorial [here](https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security)
- title: Empty passwords permitted for OpenSSH
  id: 2001
  subtitle: consider disabling this
  short: |
    It appears that you have empty passwords permitted in your OpenSSH config which may leave your entire machine vulnerable to attack. Please consider disabling this in your config file `/etc/ssh/sshd_config`.
  long: |
    SSH (Secure Shell) is a method to remote login to a server. SSH is usually secure, however if used with the default settings, can be vulnerable to attacks from unwanted parties. By default, the SSH config file is preset with some values allowing for new developers to get used to setting up SSH servers. However, this often exposes vulnerabilities by not being restrictive enough.

    Here, PermitEmptyPasswords is enabled. Bla bla bla.

    ```
    PermitEmptyPasswords no
    ```

    For more information on how to secure OpenSSH, see our larger tutorial [here](https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security)
- title: Old protocol version allowed for OpenSSH
  id: 2005
  subtitle: consider disabling this
  short: |
    It appears that you have old protocol version allowed in your OpenSSH config which may leave your entire machine vulnerable to attack. Please consider disabling this in your config file `/etc/ssh/sshd_config`.
  long: |
    SSH (Secure Shell) is a method to remote login to a server. SSH is usually secure, however if used with the default settings, can be vulnerable to attacks from unwanted parties. By default, the SSH config file is preset with some values allowing for new developers to get used to setting up SSH servers. However, this often exposes vulnerabilities by not being restrictive enough.

    Here, Protocol is either 1 or 1,2. Bla bla bla.

    ```
    Protocol 2
    ```

    For more information on how to secure OpenSSH, see our larger tutorial [here](https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security)
- title: Automatic security updates not enabled
  id: 6
  subtitle: enable automatic security updates
  short: |
    Automatic security updates may not be enabled. This leaves your machine vulnerable to security risks as software becomes outdated and open to attack. This is particularly relevant if you are running a server. Please consider setting up automatic security updates.
  long: |
    Automatic security updates by default are not enabled on most Linux distributions. However, not doing so could leave you vulnerable as software exploits are found and not corrected for leaving them outdated and open to attack. While stability of a service may be affected by continual updates, in the instance where you are running a server with high amounts of egress and ingress, it is worth considering implementing automatic security updates after some time period.

    Each Linux distribution has slightly different methods of setting up automatic security updates, however for many, including Debian and Ubuntu, you can use the `unattended-upgrades` package. To do so make sure the package is installed:

    ```
    sudo apt-get install unattended-upgrades apt-listchanges
    ```
    You will need to edit the default configuration file `/etc/apt/apt.conf.d/50unattended-upgrades` using your preferred editor.
    Note, the necessary changes vary by distribution. For more detail, you can see [here](https://wiki.debian.org/UnattendedUpgrades) for Debian or [here](https://help.ubuntu.com/lts/serverguide/automatic-updates.html) for Ubuntu.

    You will then need to create a `/etc/apt/apt.conf.d/20auto-upgrades` file or edit the pre-existing one, which is typically empty, to set up automatic updates.
    Paste the following, replacing the `x` values with the frequency at which you want updates:

    ```
    APT::Periodic::Update-Package-Lists "x";
    APT::Periodic::Download-Upgradeable-Packages "x";
    APT::Periodic::AutocleanInterval "x";
    APT::Periodic::Unattended-Upgrade "x";
    ```
    We recommend setting most of these to `1` to get daily updates. `AutocleanInterval` can be done weekly, so set to `7`.
- title: Remote access on MongoDB detected
  id: 3001
  subtitle: consider disabling remote access
  short: |
    We detected that a MongoDB instance may be accessible remotely. Consider either blocking port 27017 through the WoTT firewall management tool, or reconfigure MongoDB to only listen on localhost.
  long: |
    MongoDB is a NoSQL document database that is widely used by companies and individuals. Its popularity and support makes it an ideal database option for developers. Unfortunately, its popularity makes it a target for experienced and amateur attackers alike.

    MongoDB contains a plethora of features designed to ease the process of setting up and using its platform. One such feature is remote access which can potentially expose your system to attack.
    Enabling remote access increases the risk of stolen credentials being used to access your MongoDB, as well as leaving you unnecessarily vulnerable to attack by human error, such as unprotected remote login. Additionally, traffic over MongoDB connections is not encrypted by default, therefore opening an avenue for an attacker to be listening/sniffing the data being transmitted from a remote host to the database.

    WoTT's firewall management tool has a feature that allows you to block the port 27017, which is the port used by MongoDB for remote access. Additionally, you can reconfigure the MongoDB configuration file to only listen on localhost. To do this, navigate to the config file, usually `/etc/mongod.conf` and add the following line:
    ```
    bind_ip = 127.0.0.1
    ```
    Please remember to restart your MongoDB instance as this change will not take effect until you do so. For more information on how to securely configure your MongoDB instance, WoTT has a step-by-step guide to aid you.
- title: Remote access on MySQL instance detected
  id: 3002
  subtitle: consider disabling remote access
  short: |
    We detected that a MySQL instance may be accessible remotely. Consider either blocking port 3306 through the WoTT firewall management tool, or reconfigure MySQL to only listen on localhost.
  long: |
    MySQL remains one of the most, if not the most, popular Relational Database Management System for SQL written databases. As an open-source system, it remains a strong tool for developers to use in database design. By default, remote access is usually disabled. Allowing your MySQL instance to be remotely accessible can leave you unnecessarily vulnerable to attack by human error, such as unprotected remote login, and access via stolen credentials. Additionally, traffic over MySQL connections are not encrypted by default, therefore opening an avenue for an attacker to be listening/sniffing the data being transmitted from a remote host to the database.

    WoTT's firewall management tool has a feature that allows you to block the port 3306, which is the port used by MySQL for remote access. Alternatively, you can reconfigure the MySQL configuration file to only listen on localhost. To do so, find your config file usually located at `/etc/mysql/my.cnf` and add or edit the following line:

    ```
    bind-address=127.0.0.1
    ```
    Please remember to restart your MySQL instance as this will not take effect until you do so.
- title: No root password set for MySQL/MariaDB server
  id: 10
  subtitle: NO SUBTITLE
  short: |
    We have detected that you may not have set a root password for MySQL/MariaDB. Not having a root password set makes it easy for anyone with access to the service to copy all information from the database. It is recommended that you change the password as soon as possible.
  long: |
    By default, MySQL and MariaDB are set up with no root password. A root account is likened to a super user, anyone with access to a root account can and may do whatever they wish with a database. This includes copying data they should not be privy to and may potentially use maliciously later on. Without a root password, anyone with access to your service can execute root commands without consequence. We highly recommend you set a root password as soon as possible. However, for applications, it is important to have separate, application specific credentials for users to log in with. Otherwise, you are leaving your service vulnerable by giving unnecessary access to your root/admin.

    To set a root password for your MySQL instance, stop the MySQL instance, then use the mysqladmin command at the shell prompt like so:

    ```
    mysqladmin -u root password PASSWORD
    ```
    Please do not use PASSWORD as your root password and replace it with a more secure password, we recommend you change this password often as a precaution. To do so use the following command:

    ```
    mysqladmin -u root -p password NEWPASSWORD
    ```
    Make sure to restart the service when you execute the commands. Also a top tip: If you are using `mysqladmin` as per above, make sure to add a space before the command to avoid it being stored in your shell's history.
- title: A Memcached instance may be publicly accessible
  id: 3003
  subtitle: reconfigure Memcached
  short: |
    Your Memcached instance may be accessible remotely. This is likely due to use of a default configuration. Disable UDP connections and traffic by blocking port 11211. Alternatively, reconfigure Memcached to only listen on localhost.
  long: |
    Memcached is a popular caching server. By default, Memcached enables TCP and UDP protocols for communication. Early in 2018, an exploit in Memcached's UDP communication was discovered. Using this exploit, an attacker was able to use a publicly exposed Memcached server to relay a payload and attack a 3rd party server/service, leading to large scale attacks across the internet.

    We recommend disabling UDP connections to your Memcached service in favor of TCP connections to secure your server(s) from these attacks. You can do this by disabling UDP connections in Mamcache'd config file (often `/etc/sysconfig/memcached`). Reconfiguring Memcached to exclusively listen on the localhost is the safest option, although may not be realistic if you wish to allow connections outside your local network. Depending on your network typology, you may be able to configure Memcached to listen on a private IP that is only accessible from the local network.

    To reconfigure, navigate to the following section in your Memcached config file:

    ```
    PORT="11211"
    USER="memcached"
    MAXCONN="1024"
    CACHESIZE="64"
    OPTIONS="-l 127.0.0.1 -U 0"
    ```

    Change the `OPTIONS` in Memcached config file to match the above.
    `-U 0` blocks all UDP and `-l 127.0.0.1` forces memcached to listen to localhost only.

    Then restart:
    ```
    $ sudo service memcached restart
    ```

    This will now configure your memached instance to listen to the localhost and disables UDP traffic.
- title: System contains Meltdown and/or Spectre vulnerabilities
  id: 12
  subtitle: update your system
  short: |
    Your system appears to have [Meltdown](https://meltdownattack.com/meltdown.pdf) and [Spectre](https://spectreattack.com/spectre.pdf) vulnerabilities. This could compromise your data by allowing unwanted access to sensitive data through bypassing hardware. Update immediately with `sudo apt-get update && sudo apt-get upgrade`.
  long: |
    [Meltdown](https://meltdownattack.com/meltdown.pdf) and [Spectre](https://spectreattack.com/spectre.pdf) vulnerabilities were found in 2018, effectively affecting every computer-based hardware manufactured in the last 20 years. There are 3 common vulnerabilities, 2 encompass what is known as Spectre; the other is Meltdown. If exploited, these vulnerabilities could allow for access to what was previously thought of as protected data.

    Meltdown bypasses hardware security boundaries between applications and the operating systems and uses this to gain access to memory based on 'out of order' sequencing. Intel chips manufactured since 2010 were reported to be vulnerable to these issues. Spectre also acts at a hardware level by essentially 'tricking' a program into executing a sequence it wouldn't normally by exploiting the speculative logic systems in a chip.

    Meltdown vulnerabilities are easier to exploit than Spectre, but Spectre attacks are harder to mitigate. Software updates are being rolled out to protect against these vulnerabilities, so it is imperative that if you have affected hardware that you are up to date. While there are no actual attacks recorded to date, rather as a proof of concept, it cannot be said for certain that no attacks have taken place given that they would not be recorded.
- title: A Redis instance may be publicly accessible
  id: 3004
  subtitle: NO SUBTITLE
  short: |
    Your Redis instance may be publicly accessible. Consider reconfiguring your Redis to listen only on the localhost, or using secured channels only such as TCP through port 6379.
  long: |
    Redis (remote dictionary server) is an open-source data structure store with several uses, including as an alternative NoSQL database system. However, Redis does not have any robust security features of its own, and is intended for use by trusted clients in a trusted network. It is therefore not recommended to have a Redis instance exposed over the internet, even across a TCP channel through port 6379. To circumvent this, set your Redis instance to only listen to the localhost by binding it to the localhost. You can do this through your firewall directly, for example through WoTT's firewall tool, or the service config itself.

    Through the Redis config file, `/etc/redis/redis.conf`, you will already see that the line binding the server to the localhost exists, and just needs to be uncommented:

    ```
    bind 127.0.0.1
    ```
    By default, the service listens to the localhost. This may have changed if you have since changed the Redis settings. If there are specific IPs you wish to add, you will need to add the address to the config through the same `bind` command. We would strong recommend enabling password protection as well in this instance by adding this in the config:

    ```
    requirepass yourPasswordHere
    ```
- title: Vulnerable packages found
  id: 3
  subtitle: update or remove packages
  short: |
    Vulnerable packages have been found. These packages may be exploitable by an attacker to gain access to, or escalate permissions, on your servers. Make sure packages are up to date by running `sudo apt-get update && sudo apt-get upgrade`. If package is known to still be compromised, we recommend removing or disabling it. Note, some vulnerabilities may have yet to be addressed by the operating system vendor.
  long: |
    Packages are a key part of most Linux based operating systems software. Typically when downloading additional software onto Linux systems, it comes in pre-compiled packages that contain relevant information about updates, versions, and security. Inbuilt software therefore also has packages and these packages depend on the Linux distribution run. For example, Debian distributions have `DEB` packages and Red Hat has `RPM` packages with many other package systems being based off these two.

    Over time, if not updated, these packages become vulnerable to security risks leaving them open to exploitation from external attackers. These operating system packages can then be used by an attacker to gain access to your server, or its permissions and then escalate them. Fortunately, these packages are updated frequently. WoTT can detect an out-of-date or insecure package. Usually, it is only necessary to update the package or packages by running `sudo apt-get update && sudo apt-get upgrade` to obtain the most recent, secure version. However, it is also possible that a package has not had its security vulnerability resolved yet by the operating system vendor. In this case, it is safer to disable a particular package where possible.
- title: Enable our GitHub integration for improved workflow
  id: -1
  subtitle: Streamline the remediation process and assign issues to team members.
  short: |
    You can integrate GitHub with WoTT. By doing so, GitHub Issues will automatically be generated based on your Recommended Actions. These can then be scheduled into sprints and assigned to team members.
  long: |
    To get started with WoTT's GitHub integration, click the menu in the upper right-hand side of your screen and select 'GitHub Integration' and follow the steps.

    Your Recommended Actions will then automatically be turned into GitHub Issues as they appear. Moreover, we will also automatically update said GitHub issues as the Recommended Actions are being updated. For instance, if the Recommended Action has been resolved, the GitHub Issue will automatically get closed.
- title: Install the agent on your node(s) to get started
  id: -2
  subtitle: Without any nodes, we can't provide you with any insights.
  short: |
    WoTT uses an agent to perform the security audit. Without the agent installed on any of your servers, we are unable to provide you with any insights on your security posture.
  long: |
    To get started, you need to install our [agent](https://github.com/WoTTsecurity/agent) on your servers. The agent performs a security audit, which is then sent to our back-end for processing. With this data, we are able to provide you with tailored recommendations for how to improve your security posture.

    For the security minded people, we are happy to let you know that the agent is fully open source, so you can inspect the code base before you install it if you so desire.

    While the installation instructions below are useful for installing on small number of hosts, we also have an [Ansible Playbook](\https://github.com/WoTTsecurity/examples/tree/master/ansible) if you want to deploy the agent to a larger fleet of servers.
  terminal_title: |
    To install the agent, run the following command:
  terminal_code: |
    $ export CLAIM_TOKEN="x"
    $ curl -sL https://install.wott.io | sudo -E bash